/*
 * Libc for ManRiX OS
 * Copyright (C) 2004, 2005
 * 	Manish Regmi (regmi dot manish at gmail dot com) and
 * 	Rajesh R.C   (rajesh dot rc at gmail dot com)
 *
 * This Program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This Program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */
/*	file: stdio.h
 * 		ISO C standard input output handling.
 */

#ifndef __STDIO_H
#define __STDIO_H

#include <stdarg.h>
#include <stddef.h>
#include <sys/types.h>



#define _IOFBF   0/* Input/output fully buffered.  */
#define _IOLBF   1/*Input/output line buffered.  */
#define _IONBF   2/*Input/output unbuffered.  */

#define BUFSIZ    1024		/*Size of <stdio.h> buffers.  */

#define L_ctermid 		/*  Maximum size of character array to hold ctermid() output. */
#define L_tmpnam  (sizeof("/tmp/") + FILENAME_MAX)  /* Maximum size of character array to hold tmpnam() output. */


#ifndef SEEK_SET
#define SEEK_SET  0	/*Seek relative to start-of-file. */
#endif

#ifndef SEEK_CUR
#define SEEK_CUR  1	/* Seek relative to current position.  */
#endif

#ifndef SEEK_END
#define SEEK_END  2	/*Seek relative to end-of-file.  */
#endif

struct __filestream
{
    int fd;			/* File descriptor.  */

    char *data;			/* Data block.  */
    size_t allocation;		/* Space allocated for the block.  */
    size_t size;		/* Total valid data in the block.  */
    size_t offset;		/* Current offset into the block.  */

 //   off_t filepos;		/* Position of next entry to read.  */
};

typedef struct __filestream FILE;  		   /*.  */
typedef long int fpos_t;	/* A non-array type containing all information needed
			 * to specify uniquely every position within a file. va_list
			 */

/* Maximum size in bytes of the longest filename
 * string that the implementation guarantees can be opened.
 */
#define FILENAME_MAX  256

/* Number of streams which the implementation guarantees
 * can be open simultaneously. The value is at least eight.
 */
#define FOPEN_MAX		32

/*
 * Minimum number of unique filenames generated by tmpnam().
 */
#define TMP_MAX			999

/*
 * The following macro name shall be defined as a negative integer constant expression:
 */

#define EOF (-1)

#ifndef NULL
#define NULL ((void *)0)
#endif
/*
#define stdin   0
#define stdout  1
#define stderr  2
*/

extern FILE *stdin;

extern FILE *stdout;

extern FILE *stderr;


extern void     clearerr(FILE *);
extern char    *ctermid(char *);
extern int      fclose(FILE *);
extern FILE    *fdopen(int, const char *);
extern int      feof(FILE *);
extern int      ferror(FILE *);
extern int      fflush(FILE *);
extern int      fgetc(FILE *);
extern int      fgetpos(FILE *__restrict, fpos_t *__restrict);
extern char    *fgets(char *__restrict, int, FILE *__restrict);
extern int      fileno(FILE *);
extern void     flockfile(FILE *);
extern FILE    *fopen(const char *__restrict, const char *__restrict);
extern int      fprintf(FILE *__restrict, const char *__restrict, ...);
extern int      fputc(int, FILE *);
extern int      fputs(const char *__restrict, FILE *__restrict);
extern size_t   fread(void *__restrict, size_t, size_t, FILE *__restrict);
extern FILE    *freopen(const char *__restrict, const char *__restrict,
             FILE *__restrict);
extern int      fscanf(FILE *__restrict, const char *__restrict, ...);
extern int      fseek(FILE *, long, int);
extern int      fseeko(FILE *, off_t, int);
extern int      fsetpos(FILE *, const fpos_t *);
extern long     ftell(FILE *);
extern off_t    ftello(FILE *);
extern int      ftrylockfile(FILE *);
extern void     funlockfile(FILE *);

extern size_t   fwrite(const void *__restrict, size_t, size_t, FILE *__restrict);
extern int      getc(FILE *);
extern int      getchar(void);
extern int      getc_unlocked(FILE *);
extern int      getchar_unlocked(void);

extern char    *gets(char *);
extern int      pclose(FILE *);
extern void     perror(const char *);
extern FILE    *popen(const char *, const char *);
extern int      printf(const char *__restrict, ...);
extern int      putc(int, FILE *);
extern int      putchar(int);
extern int      putc_unlocked(int, FILE *);
extern int      putchar_unlocked(int);
extern int      puts(const char *);
extern int      remove(const char *);
extern int      rename(const char *, const char *);
extern void     rewind(FILE *);
extern int      scanf(const char *__restrict, ...);
extern void     setbuf(FILE *__restrict, char *__restrict);
extern int      setvbuf(FILE *__restrict, char *__restrict, int, size_t);
extern int      snprintf(char *__restrict, size_t, const char *__restrict, ...);
extern int      sprintf(char *__restrict, const char *__restrict, ...);
extern int      sscanf(const char *__restrict, const char *__restrict, ...);
extern char    *tempnam(const char *, const char *);
extern FILE    *tmpfile(void);
extern char    *tmpnam(char *);
extern int      ungetc(int, FILE *);
extern int      vfprintf(FILE *__restrict, const char *__restrict, va_list);
extern int      vfscanf(FILE *__restrict, const char *__restrict, va_list);
extern int      vprintf(const char *__restrict, va_list);
extern int      vscanf(const char *__restrict, va_list);
extern int      vsnprintf(char *__restrict, size_t, const char *__restrict,
             va_list);
extern int      vsprintf(char *__restrict, const char *__restrict, va_list);
extern int      vsscanf(const char *__restrict, const char *__restrict,
             va_list arg);

#endif  /*__STDIO_H */

